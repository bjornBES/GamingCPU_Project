
.section TEXT

;
; Arguments:
;   far FileHandler* destination    [BP - 18]
;   uint8_t* Path                   HL
; description:
;   All paths are from the root directory all paths should start with a /
;
; void GetFileHandler(FileHandler* destination, long uint8_t* Path)
;
_GetFileHandler:
    enter

    call        [_ReadRootDirectory]                        ; reading the root directory
    inc         HL                                          ; skiping the first char '/'

    mov         DS,                     HIGH @Buffer        ; high part
    mov         B,                      LOW @Buffer         ; low part
    
FindFileLoop:
    mov         C,                      15                  ; 15 times
    cmpl                                                    ; Comparing the names
    je          
    add         HL,               word 0x20                ; moving to the next entry         
    
    leave

;
; description:
;   Getting all the entrys from a directory
;
; Arguments:
;   uint8_t drive                   [BP - 18]   1   byte
;   uint16_t sector                 [BP - 19]   2   bytes
;   uint16_t track                  [BP - 21]   2   bytes
;   uint8_t head                    [BP - 23]   1   byte
;   far entry* destination          HL          4   bytes
;
; void GetEntres(uint8_t drive, uint16_t sector, uint16_t track, uint8_t head, far entry* destination)
_GetEntres:
    enter
    push        DS

    mov         AX,                     [BP - 18]
    push        AX
    call        [_ReadSector]

    mov         DS,                     HIGH @Buffer
    mov         B,                      LOW @Buffer

MoveEntryesLoop:
    mov         AX,                     [DS:B]
    jz          [ExitMoveEntryes]
    mov         [HL],                   AX
    add         HL,                     0x4
    add         B,                      0x4
    jmp         [MoveEntryesLoop]
ExitMoveEntryes:

    pop         DS
    leave
    ret         4

;
; return
;   entry* result               HL
;
; Arguments:
;   uint32_t memoryAddress          [BP - 18]   4   bytes
; description:
;   This is the memory address that the entry is at in memory
;
;   far entry* result               [BP - 24]   4   bytes
;
; void GetEntry(uint32_t memoryAddress, far entry result)
_GetEntry:
    enter

    mov         HL,                     [BP - 24]
    mov         DS,                     [BP - 18]           ; DS is the upper part of the memory address
    mov         B,                      [BP - 20]           ; B is the lower part of the memory address
    mov         CL,                     0x20

GetEntryLoop:
    mov         AX,                     [DS:B]
    mov         [HL],                   AX
    sub         CL,                     4
    jnz         [GetEntryLoop]

    popr
    mov         HL,                     [BP - 24]
    pop         BP
    ret         8

; 
; reading the root directory
;
_ReadRootDirectory:
    pushr
    sez         A
    mov         B,                      0x03
    sez         C
    mov         DL,                     [DriveIndex]
    push        AL
    push        B
    push        C
    push        DL
    call        [_ReadSector]
    popr
    retz
    
;
; Arguments:
;   uint8_t drive                   [BP - 18]
;   uint16_t sector                 [BP - 19]
;   uint16_t track                  [BP - 21]
;   uint8_t head                    [BP - 23]
;
; void ReadSector(uint8_t drive, uint16_t sector, uint16_t track, uint8_t head)
;
_ReadSector:
    enter

    mov         AL,                     [BP - 23]           ; Heads
    mov         B,                      [BP - 19]           ; Sector
    mov         C,                      [BP - 21]           ; track
    mov         DL,                     [BP - 18]           ; Drive
    mov         HL,                     far @Buffer         ; description address
    mov         AH,                     0x01                ; read sector
    int         0x13                                        ; calling

    leave
    ret         6

.struct FileHandler

Headler:        .resd
IsDirectory:    .resb
Position:       .resw
Size:           .resw

.endstruct

.struct Entry

fileName:       .res 0xB
fileType:       .res 0x5
startingSector: .resw
fileSize:       .resb
Flags:          .resb
CDate:          .resw
CTime:          .resw

.endstruct

.local Buffer
Buffer:
.res 0x200
.res 0x200