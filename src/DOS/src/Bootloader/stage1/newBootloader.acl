.setcpu "BC16CE"

.org 0x7E00
__START_STACK__:

.section Bootloader

.org 0x7C00
Entry:
    cli
    mov     AL,             CR0
    or      A,              0x30
    mov     CR0,            AL                  ; enabling the A24 line and extended mode

    mov     HL,             LONG @Message
    call    short [Print]

    mov     SP,             LOW @__START_STACK__
    mov     DS,             HIGH @Stage2_Name   ; data is the segment where Stage2_Name is in
    mov     B,              LOW @Stage2_Name

    int     0x02

    mov     R8,             D                   ; saving the boot drive in a variabel
    sez     R1                                  ; heads = 0
    sez     R2                                  ; track = 0
    mov     R3,             0x03                ; sectors = 3
    mov     HL,             long @_STAGE2       ; destination = Bootloader
    call    rel [ReadSector]                    ; reading the root directory

    mov     C,              16                  ; times for the CMPL instruction
    sez     A                                   ; making a counter
; find the stage2 file
FindStage2File:
    cmp     A,              0x8                 ; if the count is over 0x8 there is a error 
    jne     rel [FindStage2FileNext]            ; jmp if there is no error
    mov     HL,             LONG @ErrorFindingStage2
    call    rel [Error]
FindStage2FileNext:
    CMPL                                        ; Compare the DS:B and HL values in memory for C times
    je      rel [ExitFindStage2]                ; yes
    add     L,              0x20                ; next file in root
    inc     A                                   ; inc the counter
    jmp     rel [FindStage2File]                ; loop next

ExitFindStage2:                                 ; now we have found the stage 2 Bootloader file
    add     L,              16                  ; pointing to the starting sector 0x10
    mov     R3,             [HL]                ; R3 = starting sector
    call    [OFS]                               ; overflowing sector into tracks/heads
    add     L,              0x2                 ; HL offset is 0x12
    mov     A,              [HL]                ; A = file size in sectors 
    sez     L                                   ; now HL is pointing to Stage2

LoadStage2Loop:                                 ; loading the first sector of the stage 2 Bootloader
    call    rel [ReadSector]                    ; reading the sector
    add     HL,             0x200               ; next sector in memory
    inc     R3                                  ; next sector on disk
    call    rel [OFS]                           ; overflowing
    dec     A                                   ; remamin sectors dec
    jnz     rel [LoadStage2Loop]                ; looping til done

    mov     D,              R8                  ; D = drive number
    jmp     long [_STAGE2]

;
; parameters
;   R1:         head
;   R2:         track
;   R3:         sectors
;   DL:         drive
;   HL:         destination
;
ReadSector:
    pushr                                       ; pushing A, B, C, D, H, L

    mov     A,              0x0100              ; instruction read sector
    int     0x13                                ; calling the disk interrupt services

    jnc     rel [ExitReadSector]                ; Good

    mov     HL,             LONG @ErrorMessageReading
    jmp     rel [Error]

ExitReadSector:
    popr
    retz

;
; return and parameters
;   R3  sectors
;   R2  track
;
; overflow sectors
;
OFS:
    cmp     R3,         19              ; R3 <= 19
    jle     rel [ExitOFS]               ; yes
    sub     R3,         18              ; no R3 -= 18
    inc     R2                          ; R2(tracks)++
    jmp     rel [OFS]                   ; loop :D
ExitOFS:
    retz                                ; done


;
;   HL  char* message
;
Print:
    pushr
    sez     C
    sez     A
    sez     B
PrintLoop:
    mov     BL,         [HL]
    jz      rel [ExitPrintLoop]
    int     0x10
    inc     HL
ExitPrintLoop:
    popr
    retz

;
; parameters
;   HL:         address to the message
;
Error:
    pushr
    mov         L,      @ErrorMessage
    call        rel [Print]
    popr
    call        rel [Print]
    jmp         $

ErrorMessage:
.db "ERR ",0
ErrorMessageReading:
.db "CNRS",0
ErrorFindingStage2:
.db "CNFS2F",0

Message:
.db "HW!",0

Stage2_Name:
.db "STAGE2",0,0,0,0,0
.db "BIN",0,0

ENDOFCODE:

.section Boot
.dw 0x55AA

.section Stage2