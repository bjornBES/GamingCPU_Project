
.section TEXT
;
; far byte des                      [BP - 26]
; uint16 sector                     [BP - 22]
; uint16 track                      [BP - 18]
; uint8 head                        [BP - 14]
; uint8 drive                       [BP - 10]
;
; return:
; bool error                        AX
;
; func ACLAsmReadSector(uint8 drive, uint8 head, uint16 track, uint16 sector, far byte des)
;
.global _ACLAsmReadSector
_ACLAsmReadSector:
    enter
    pushr

    mov         A,              CR0
    and         A,              0xFF7F                      ; 0x0080 with a not
    mov         CR0,            A                           ; exit protected mode

    mov         A,              @__START_DATA__
    mov         DS,             A
    mov         SS,             @__START_STACK__

    push        R1
    mov         R1L,            [BP - 14]
    mov         R2,             [BP - 18]
    mov         R3,             [BP - 22]
    mov         DL,             [BP - 14]
    mov         HL,             [BP - 26]

    mov         AH,             0x01
    int         0x13

    sez         R16
    jnc         [_ACLAsmRSDone]
    mov         R16,            0x01
_ACLAsmRSDone:

    mov         A,              CR0
    or          A,              0x0080                      ; 0x0080 
    mov         CR0,            A                           ; enabling protected mode

    mov         AX,             FAR @__START_DATA__
    mov         EDS,            AX
    mov         ESS,            FAR @__START_STACK__

    popr
    mov         AX,             R16
    leave
    ret         20                                          ; - 20 in arguments
    
;
; char c                            [BP - 14]
; uint8 color                       [BP - 10]
;
; func ACLAsmWriteChar(char c, uint8 color)
;
.global _ACLAsmWriteChar
_ACLAsmWriteChar:
    enter
    pushr

    mov         A,              CR0
    and         A,              0xFF7F                      ; 0x0080 with a not
    mov         CR0,            A                           ; exit protected mode

    mov         SS,             @__START_STACK__

    mov         AL,             [BP - 10]
    mov         BL,             [BP - 14]

    mov         AH,             0x00
    int         0x10

_ACLAsmWCDone:

    mov         A,              CR0
    or          A,              0x0080                      ; 0x0080 
    mov         CR0,            A                           ; enabling protected mode

    mov         ESS,            FAR @__START_STACK__

    popr
    leave
    ret         8                                           ; - 8 in arguments