.section TEXT
;
; Arguments:
; uint8_t color     [BP - 9]
; uint8_t c         [BP - 8]
;
; void COut(uint8_t color, uint8_t c)
COut:
    enter
    push    A
    push    HL

    mov     AH,             [BP - 9]
    mov     AL,             [BP - 8]
    cmp     AL,             0xA                 ; \n
    je      [NewLine]
    cmp     AL,             0x0                 ; \0
    je      [EndOfLoad]

    call    [GetCursorAddress]

    ; writing to VRAM
    mov     [HL],           A                   ; writing the data
EndOfLoad:
    mov     word A,         [Cursorx]           ; A = Cursorx
    inc     A                                   ; A += 1
    mov     [Cursorx],      A                   ; Cursorx = A
    cmp     A,              [ScreenHeight]      ; A >= ScreenHeight ?
    jge     [NewLine]                           ; Yes
    jmp     [ExitCout]

NewLine:
    sez     A
    mov     [Cursorx],      A
    movw    A,              [Cursory]
    inc     A
    mov     [Cursory],      A

ExitCout:
    pop     HL
    pop     A
    leave
    ret     2



;
; Return in HL
; 
; private int* GetCursorAddress()
.local GetCursorAddress
GetCursorAddress:
    push    C

    sez     L
    movd    H,              0x0001              ; memory address of VRAM
    movw    C,              [Cursorx]           ; loading cursorx into C
    mul     C,              0x2                 ; C *= 2
    add     HL,             C                   ; loading cursorx into HL
    movw    C,              [Cursory]           ; loading cursory into C
    mul     C,              [ScreenWidth]
    add     HL,             C                   ; X and Y is now a coord

    pop     C
    retz