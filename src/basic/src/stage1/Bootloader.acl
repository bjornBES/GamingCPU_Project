.setcpu "BC16CE"

.section Bootloader

.org 0x7C00
Entry:
    mov     AL,             CR0
    or      A,              0x10
    mov     CR0,            AL                  ; enabling extended mode

    mov     SS,             0x00FA              ; stack is at 0x00FA:XXXXX
    mov     DS,             HIGH @Entry         ; data is in this segment
    sez     SP

    mov     R16,            D                   ; saving the boot drive in R16 (not in use)

    mov     R3,             0x03                ; sectors = 3
    sez     R1                                  ; heads = 0
    sez     R2                                  ; track = 0
    mov     AX,             @_STAGE2            ; destination = Bootloader
    call    [ReadSector]                        ; reading the root directory

    mov     HL,             @Stage2_Name        ; HL = Stage2 Name
    mov     C,              16                  ; times for the CMPL instruction

; find the stage2 file
FindStage2File:
    CMPL                                        ; Compare the AX and HL values in memory for C times
    je      rel [ExitFindStage2]                ; yes
    add     AX,             0x20                ; next file in root
    jmp     rel [FindStage2File]                ; loop next
ExitFindStage2:                                 ; now we have found the stage 2 Bootloader file
    add     AX,             16                  ; pointing to the starting sector 
    sez     R2                                  ; R2 = track = 0
    mov     B,              [AX]                ; B = starting sector
    mov     R3,             B                   ; R3 = starting sector
    call    [OFS]                               ; overflowing sector into tracks/heads
LoadStage2:                                     ; loading the first sector of the stage 2 Bootloader
    add     AX,             0x2                 ; AX offset is 0x11
    mov     C,              [AX]                ; CL = file size in sectors 
    mov     D,              R16                 ; D = drive number
    mov     AX,             @_STAGE2            ; AX = Bootloader address
    sez     R1                                  ; head = 0
    call    rel [ReadSector]
LoadStage2Loop:
    add     AX,             0x200               ; next sector in memory
    inc     R3                                  ; next sector on disk
    call    rel [OFS]                           ; overflowing
Load:
    call    rel [ReadSector]                    ; reading the sector
    dec     C                                   ; C--
    jnz     rel [LoadStage2Loop]                ; looping til done
    mov     D,              R1                  ; D = drive number
    mov     HL,             far @_STAGE2
    push    HL
    retl

;
; parameters
;   AX:         destination
;   R3:         sectors
;   R2:         track
;   R1:         head
;   DL:         drive
;
ReadSector:
    pushr                                       ; pushing AX, BX, CX, DX, H, L

    mov     HL,             AX                  ; AX = HL & HL = AX swaping the destination address
    mov     AH,             0x01                ; instruction read sector
    int     0x13                                ; calling the disk interrupt services

    jnc     rel [ExitReadSector]                ; Good

    mov     HL,             @ErrorMessageReading
    jmp     rel [Error]

ExitReadSector:
    popr
    retz

;
; return and parameters
;   R2  sectors
;   R3  track
;
; overflow sectors
;
OFS:
    push    A
    mov     A,          R2
OFSLOOP:
    cmp     A,          19              ; A <= 19
    jle     rel [ExitOFS]               ; yes
    sub     A,          18              ; no A -= 18
    inc     R3                          ; R3(tracks)++
    jmp     rel [OFSLOOP]               ; loop :D
ExitOFS:
    mov     R2,         A
    pop     A
    retz                                ; done

ErrorMessageReading:
.db "Error reading sector",0

;
; parameters
;   HL:         address to the message
;
Error:
    sez         A
    sez         B
PrintLoop:
    mov         AL,     [HL]
    jz          [ExitPrintLoop]
    int         0x10
    inc         HL 
    jmp         [PrintLoop]

ExitPrintLoop:
    jmp         $

Stage2_Name:
.db "STAGE2",0,0,0,0,0
.db "BIN",0,0

.org 0x7DFE
.dw 0x55AA

.section Stage2