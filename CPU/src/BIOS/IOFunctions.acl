$STR                = 0x100
$MSR                = 0x102

$DRS                = 0x103
$DATA               = 0x104

;
; Arguments:
; uint16_t c        [BP - 16]
; uint16_t color    [BP - 18]
;
; void CharOut(uint8_t c, uint8_t color)
.global CharOut
CharOut:
    enter

    mov     A,              [BP - 18]
    push    AL
    mov     A,              [BP - 16]
    push    AL
    call    [COut]

    leave
    ret     0x4

;
; Arguments:
; char* str         DS:B
;
; void PrintStr(char* str)
.global PrintStr
PrintStr:
    enter

    mov     CL,             0
    PrintStrLoop:
    mov     AL,             [DS:B]
    jnz     [ExitPrintStr]
    push    CL
    push    AL
    call    [COut]
    inc     B
    jnv     [PrintStrLoop]
    inc     DS
    jmp     [PrintStrLoop]
    ExitPrintStr:
    leave
    retz

;
; Arguments:
;
; return in AL
;
; char ReadCharKey()
ReadCharKey:
    call    [ReadBuffer]
    retz

; Arguments:
; uint16_t drive            [BP - 16]   2 byte
; uint16_t Head             [BP - 18]   2 byte
; uint16_t track            [BP - 20]   2 bytes
; uint16_t sector           [BP - 22]   2 byte
; far uint8_t* address      [BP - 24]   4 bytes
;
;
;
; void Read_Sector(far uint8_t* address, uint8_t sector, uint8_t drive, uint8_t Head, uint16_t track)
.global Read_Sector
Read_Sector:
    enter

    mov     A,              [BP - 18]       ; uint8_t head
    push    AL
    mov     A,              [BP - 20]       ; uint16_t Track
    push    A
    mov     A,              [BP - 22]       ; uint8_t sector
    push    AL
    mov     AL,             0x02            ; data length
    push    AL
    mov     A,              [BP - 16]       ; uint8_t drive
    push    AL

    call    [Read_Data]

    mov     C,              0x200
    mov     HL,             [BP - 24]

    ReadDataLoop:
    inb     %DATA,          AL
    mov     [HL],           AL
    inc     HL
    dec     C
    jnz     [ReadDataLoop]

    leave
    ret     12

.includeil "./BIOS_VideoDriver.acl"
.includeil "./FDDController.acl"
