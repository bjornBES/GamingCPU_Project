$variabel_segment = 0x000E

$STR                = 0x100
$MSR                = 0x102

$DRS                = 0x103
$DATA               = 0x104

;
; Arguments:
; uint8_t c         [BP - 6]
; uint8_t color     [BP - 7]
;
; void CharOut(uint8_t c, uint8_t color)
.global CharOut:
    push        BP 
    mov         BP,     SP
    pushr
    push        DS
    push        ES

    ; getting arguments
    mov         AL,     [BP - 6]            ; loading the char
    mov         AH,     [BP - 7]            ; loading the color

    ; the some variabels
    mov         B,      [Cursorx]           ; loading cursorx into C
    mov         C,      [Cursory]           ; loading cursory into D
    mul         C,      %height
    add         B,      C                   ; X and Y is now a coord
    ; video memory is at 0x0004:0000
    ; writing to VRAM
    mov         HL,     0x004_0000          ; memory address of VRAM
    add         HL,     dword B             ; adding the cursorx to the memory address of VRAM

    mov         [HL],   A                   ; writing the char data

    pop         ES
    pop         DS
    popr
    pop         BP 
    ret 2

; Arguments:
; long uint8_t* address     [BP - 6] 3 bytes
; uint8_t sector            [BP - 9] 1 byte
; uint8_t Head              [BP - 10] 1 byte
; uint16_t track            [BP - 11] 2 bytes
; uint8_t drive             [BP - 13] 1 byte
;
;
;
; void Read_Sector(uint8_t drive, uint16_t track, uint8_t Head, uint8_t sector, long uint8_t* address)
.global Read_Sector:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             [BP - 10]       ; uint8_t head
    push    AL
    mov     A,              [BP - 11]       ; uint16_t Track
    push    A
    mov     AL,             [BP - 9]        ; uint8_t sector
    push    AL
    mov     AL,             0x02            ; data length
    push    AL
    mov     AL,             [BP - 13]       ; uint8_t drive
    push    AL

    call    [Read_Data]

    mov     D,              0x200
    mov     HL,             tbyte [BP - 6]

    ReadDataLoop:
    inb     %DATA,          AL
    mov     [HL],           AL
    inc     HL
    dec     D
    jnz     [ReadDataLoop]

    popr
    pop     BP
    ret     8

.includeil "./Filesystem.acl"
