$STR                = 0x100
$MSR                = 0x102

$DRS                = 0x103
$DATA               = 0x104

; 5,25" 512 sector size
$FloppyGPL1         = 0x2A

; 3,5" 512 sector size
$FloppyGPL2         = 0x1B

$SectorSize128      = 0x00
$SectorSize256      = 0x01
$SectorSize512      = 0x02

$Drive1 = 0x00
$Drive2 = 0x01
$Drive3 = 0x02
$Drive4 = 0x03

$CommandRead        = 0x01
$CommandWrite       = 0x02
$CommandRecalibrate = 0x03
$CommandSeek        = 0x04

; Arguments:
; uint8_t Drive             [BP - 6]
;
;
;
; void Initialize(uint8_t drive);
.global Initialize:
    push    BP
    mov     BP,             SP
    pushr

    push    [BP - 6]
    call    [Recalibrate]

    popr
    ret     0

; Arguments:
; uint8_t drive             [BP - 6]
; uint8_t head              [BP - 7]
; uint16_t track            [BP - 8]
; uint8_t sector            [BP - 10]
; uint8_t data_length       [BP - 11]
;
; Read data from a specified sector of a floppy disk
;
; void Read_Data(uint8_t data_length, uint8_t sector, uint16_t cylinder, uint8_t head, uint8_t drive);

Read_Data:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             %CommandRead        ; command code for Read data
    outb    %DATA,          AL                  ; write the command to the FDC command register

    mov     AL,             [BP - 6]            ; drive number
    and     AL,             0x03                ; masking the 0b0000_0011

    rol     AL,             6                   ; rolling AL 6 times 0b1100_0000
    mov     BL,             [BP - 7]            ; getting the Head
    or      AL,             BL                  ; now it's 0bDD00_HHHH
    outb    %DATA,          AL                  ; Outputing the head and drive
        
    mov     A,              [BP - 8]            ; track number
    outb    %DATA,          A                   ; writing the track number

    mov     AL,             [BP - 10]           ; Sector
    outb    %DATA,          AL                  ; writing the Sector

    mov     AL,             [BP - 11]           ; data_length
    outb    %DATA,          AL                  ; writing the data_length

    mov     A,              0x0080
    call    [WaitForMSR]

    popr
    pop     BP
    ret     6

; Arguments:
; uint8_t drive             [BP - 6]
; uint8_t head              [BP - 7]
; uint16_t track            [BP - 8]
; uint8_t sector            [BP - 10]
; uint8_t data_length       [BP - 11]
; long uint8_t* data        [BP - 12]
;
; Write data to a specified sector of a floppy disk
;
; void Write_Data(const uint8_t *data, uint8_t data_length, uint8_t sector, uint16_t cylinder, uint8_t head, uint8_t drive);

.global Write_Data:

; Arguments:
; uint8_t drive             [BP - 6]
; uint16_t track            [BP - 7]
;
; Move the read/write head to a specific track
;
; void Seek(uint8_t drive, uint16_t track);
.global Seek:
    push    BP
    mov     BP,             SP
    pushr
; Arguments:
; uint8_t Drive             [BP - 6]
;
; Recalibrate the drive (move the head to track 0)
;
; void Recalibrate(uint8_t drive, uint8_t head);
.global Recalibrate:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             %CommandRecalibrate ; command code for Read data
    outb    %DATA,          AL                  ; write the command to the FDC command register

    mov     AL,             [BP - 6]            ; drive number
    outb    %DATA,          AL

wait_irq:
    mov     AL,             [ReceivedIRQ]
    and     AL,             0x80
    jz      [wait_irq]

    mov     [ReceivedIRQ],  0    

    popr
    pop     BP
    ret     1

; Arguments:
; uint8_t drive             [BP - 6]
;
; void Format(uint8_t drive)
.global Format:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             [BP - 6]
    push    AL                                  ; Drive ?

    push    0                                   ; Head 0
    call    [Recalibrate]


.global FloppyInterruptHandler:
    mov     [ReceivedIRQ],  1

    rti

WaitForMSR:
    push    B
    inb     %MSR,           B
    and     B,              A
    jz      [WaitForData]
    pop     B

Buffer:
.db         "BFS01 "            ; header
.resb                           ; disk letter
.db         2                   ; head
.resw                           ; Tracks per head
.resw                           ; sectors
.resb                           ; Sectors per track
.dw         0x200               ; bytes per sector
.dw         0x400               ; root address
.dw         0x10                ; max number of entries in root directory
.resb                           ; fat allocated
.res        0x10                ; volume label
End:
.res        @End-@Buffer