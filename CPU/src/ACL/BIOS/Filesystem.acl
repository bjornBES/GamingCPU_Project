$STR                = 0x100
$MSR                = 0x102

$DRS                = 0x103
$DATA               = 0x104

; 5,25" 512 sector size
$FloppyGPL1         = 0x2A

; 3,5" 512 sector size
$FloppyGPL2         = 0x1B

$SectorSize128      = 0x00
$SectorSize256      = 0x01
$SectorSize512      = 0x02

$Drive1 = 0x00
$Drive2 = 0x01
$Drive3 = 0x02
$Drive4 = 0x03

$CommandRead        = 0x01
$CommandWrite       = 0x02
$CommandRecalibrate = 0x03

.global Initialize:
    push    BP
    mov     BP,             SP
    pushr

    popr
    ret     0

; Arguments:
; uint8_t head              [BP - 6]
; uint16_t track            [BP - 7]
; uint8_t sector            [BP - 9]
; uint8_t data_length       [BP - 10]
; uint8_t drive             [BP - 11]
;
; Read data from a specified sector of a floppy disk
;
; void Read_Data(uint8_t drive, uint8_t data_length, uint8_t head, uint16_t cylinder, uint8_t sector);

Read_Data:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             %CommandRead        ; command code for Read data
    outb    %DATA,          AL                  ; write the command to the FDC command register

    mov     AL,             [BP - 11]           ; drive number
    and     AL,             0x03                ; masking the 0b0000_0011

    rol     AL,             6                   ; rolling AL 6 times 0b1100_0000
    mov     BL,             [BP - 6]            ; getting the Head
    or      AL,             BL                  ; now it's 0bDD00_HHHH
    outb    %DATA,          AL
        
    mov     A,              [BP - 7]            ; track number
    outb    %DATA,          A

    mov     AL,             [BP - 9]            ; Sector
    outb    %DATA,          AL

    WaitForData:
    inb     %MSR,           AL
    and     AL,             0x80
    jz      [WaitForData]

    popr
    pop     BP
    ret     5

; Arguments:
; long uint8_t *data        [BP - 6]
; uint8_t data_length       [BP - 9]
; uint8_t sector            [BP - 10]
; uint8_t head              [BP - 11]
; uint16_t track            [BP - 12]
; uint8_t drive             [BP - 14]
;
; Write data to a specified sector of a floppy disk
;
; void Write_Data(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t data_length, const uint8_t *data);

.global Write_Data:

; Read the identification field of a sector
; Arguments:
; long uint8_t *id_field:
; uint8_t sector:
; uint8_t head:
; uint16_t cylinder:
; uint8_t drive:
; void Read_ID(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t *id_field);

; Write deleted data to a specified sector
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - const uint8_t *data: Pointer to buffer with data to write (INPUT)
; void Write_Deleted_Data(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, const uint8_t *data);

; Read deleted data from a specified sector
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - uint8_t *buffer: Pointer to buffer where read data will be stored (OUTPUT)
; void Read_Deleted_Data(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t *buffer);

; Arguments:
; uint16_t track            [BP - 6]
; uint8_t drive             [BP - 8]
;
; Move the read/write head to a specific track
;
; void Seek(uint8_t drive, uint16_t track);
.global Seek:

; Arguments:
; uint8_t Drive             [BP - 6]
; uint8_t Head              [BP - 7]
;
; Recalibrate the drive (move the head to track 0)
;
; void Recalibrate(uint8_t drive, uint8_t head);
.global Recalibrate:
    push    BP
    mov     BP,             SP
    pushr

    mov     AL,             %CommandRecalibrate ; command code for Read data
    outb    %DATA,          AL                  ; write the command to the FDC command register

    mov     AL,             [BP - 6]            ; drive number
    and     AL,             0x03                ; masking the 0b0000_0011

    rol     AL,             6                   ; rolling AL 6 times 0b1100_0000
    mov     BL,             [BP - 7]            ; getting the Head
    or      AL,             BL                  ; now it's 0bDD00_HHHH
    outb    %DATA,          AL

wait_irq:
    mov     AL,             [ReceivedIRQ]
    jz      [wait_irq]

    mov     [ReceivedIRQ],  0    

    popr
    pop     BP
    ret     1

; Sense the interrupt status
; Arguments:
;   - uint8_t *status: Pointer to buffer where interrupt status will be stored (OUTPUT)
; void Sense_Interrupt_Status(uint8_t *status);

; Format a specified track
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t track: Track number to format
; void Format_Track(uint8_t drive, uint16_t track);

; Sense the status of a specified drive
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint8_t *status: Pointer to buffer where drive status will be stored (OUTPUT)
; void Sense_Drive_Status(uint8_t drive, uint8_t *status);

; Specify various operational parameters
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t parameters: Configuration parameters (e.g., data rate, step rate)
; void Specify(uint8_t drive, uint16_t parameters);

; Read an entire track of data
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t track: Track number to read
;   - uint8_t *buffer: Pointer to buffer where read data will be stored (OUTPUT)
; void Read_Track(uint8_t drive, uint16_t track, uint8_t *buffer);

; Read the version number of the controller
; Arguments:
;   - uint8_t *version: Pointer to buffer where version number will be stored (OUTPUT)
; void Read_Version(uint8_t *version);

; Dump the contents of the controller's internal registers
; Arguments:
;   - uint8_t *registers: Pointer to buffer where register contents will be dumped (OUTPUT)
; void Dump_Registers(uint8_t *registers);

; Scan data for equality with a specific value
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - uint8_t value: Value to compare with (INPUT)
;   - uint8_t *result: Pointer to buffer where result will be stored (OUTPUT)
; void Scan_Equal(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t value, uint8_t *result);

; Configure the drive for perpendicular recording
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint8_t mode: Mode to set (e.g., 0 for normal, 1 for perpendicular)
; void Perpendicular_Mode(uint8_t drive, uint8_t mode);

; Configure various operational parameters
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t config: Configuration settings (INPUT)
; void Configure(uint8_t drive, uint16_t config);

; Lock or unlock the controllerâ€™s configuration
; Arguments:
;   - uint8_t lock: 1 to lock, 0 to unlock
; void Lock(uint8_t lock);

; Verify the data on a specified sector
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - uint8_t *status: Pointer to buffer where verify status will be stored (OUTPUT)
; void Verify(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t *status);

; Scan data to check if it is less than or equal to a specific value
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - uint8_t value: Value to compare with (INPUT)
;   - uint8_t *result: Pointer to buffer where result will be stored (OUTPUT)
; void Scan_Low_Or_Equal(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t value, uint8_t *result);

; Scan data to check if it is greater than or equal to a specific value
; Arguments:
;   - uint8_t drive: Drive number (0-3)
;   - uint16_t cylinder: Cylinder (track) number
;   - uint8_t head: Head number (0 or 1)
;   - uint8_t sector: Sector number (1-18)
;   - uint8_t value: Value to compare with (INPUT)
;   - uint8_t *result: Pointer to buffer where result will be stored (OUTPUT)
; void Scan_High_Or_Equal(uint8_t drive, uint16_t cylinder, uint8_t head, uint8_t sector, uint8_t value, uint8_t *result);

.global FloppyInterruptHandler:
    mov     [ReceivedIRQ],  1

    rti