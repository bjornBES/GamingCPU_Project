.section TEXT

$BootableDiskNumber = 0x55AA

.SETCPU "BCG16"

.org 0x200
.global _BIOSStart:
    pushr

    mov     HL,             @BIOS_IRQ_InterruptPointers
    sez     A
    int     0x00

    sez     SS                                  ; SS = 0
    mov     SP,             @Stack              ; SP = 0x8000

    call    [FindBootDisk]

    mov     A,              @RAM                ; A = @RAM

    mov     C,              @EndOfBIOS
    mov     D,              @BIOSEnd - @EndOfBIOS

    ; moving the End of the BIOS into RAM
    jmp     [MoveToRAM]

; this function will use the DL register as the disk index
FindBootDisk:

    mov     DL,             0x0
    sef     0x0200

FindBootDiskLoop:
    push    DL                                  ; Drive X
    call    [Initialize]

    push    long @RAM                           ; long uint8_t *data
    push    0x1                                 ; uint8_t sector
    push    0x0                                 ; uint8_t head
    push    word 0x0                            ; uint16_t track
    push    DL                                  ; uint8_t drive
    call    [Read_Sector]

    mov     A,              [RAM + 510]
    cmp     A,              %BootableDiskNumber
    je      [Exit_FindDiskLoop]
    inc     DL
    cmp     DL,             4
    jne     [FindBootDiskLoop]
    mov     AL,             'B'
    push    AL
    jmp     [Error_Invalid_BootDisk]
Exit_FindDiskLoop:
    clf     0x0200
    mov     [DiskNumber],   DL
    retz

.section BSS
DiskNumber:
.resb
ReceivedIRQ:
.resb
Cursorx:
.resw
Cursory:
.resw
EReg:
.resd

.includeil "./BIOS_errors.acl"
.includeil "./IOFunctions.acl"
.includeil "./BIOS_Functions.acl"

EndOfBIOS:
    mov     A,              CR1
    xor     A,              0x01                ; getting out of the BIOS
    mov     CR1,            A

    ; moving the fainal part of the BIOS

    mov     A,              @_BIOSStart         ; A = 0x200
    push    A

    mov     C,              @BIOSEnd
    mov     D,              @End - @BIOSEnd

    jmp     [MoveToRAM]

; this is at offset 0 when ran
; this code is the code that exites the BIOS
BIOSEnd:

    mov     DL,             [DiskNumber]

    push    long @RAM                           ; long uint8_t *data
    push    0x1                                 ; uint8_t sector
    push    0x0                                 ; uint8_t head
    push    word 0x0                            ; uint16_t track
    push    DL                                  ; uint8_t drive
    call    [Read_Sector]

    popr

    jmp     [RAM]

    jmp     [$]
End:

.section DATA

.includeil "./BIOS_Interrupt_Pointer.acl"

.section BSS
.org 0x8000
Stack:

.res 0x400

StackEnd:

.section TEXT

.times @MoveToRAM - $ .db 0
MoveToRAM:
    push    A
MoveToRAM_LOOP:
    mov     [A],            byte [C]
    inc     B
    inc     C
    dec     D

    test    D
    jnz     [MoveToRAM_LOOP]

    pop     A
    ; now we are executing the end of the BIOS
    jmp     [A]

.org 0x9000
RAM:
